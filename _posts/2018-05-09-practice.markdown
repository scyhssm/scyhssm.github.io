---
layout:    post
title:      "第四范式实习第五天"
subtitle:   "Day5 Practice"
date:       2018-05-09 12:00:00
author:     "scyhssm"
header-img: "img/实习.jpeg"
header-mask: 0.3
catalog:    true
tags:
    - 实习
---

>这是我在范式第五天，累

## 工作内容
1.参与实现了一个较小的updateSolutionPublishConfig方法，可以将PublishConfig更新到数据库里。

2.使用Junit单元测试updateSolutionPublishConfig方法。

3.学习参与公司的迭代开发整个流程，具体如Git的使用。

4.浏览了平台研发部各部门的业务，但不具体到产品。

5.深入思考了为什么不能在构造函数中抛出异常的原因。

## 遇到的问题
1.完成并提交了代码，但是对于方法的上下游以及方法和类为何这么设计了解不够深入，只是照搬照抄，需要更深入的去了解。

2.注解的实现原理。

3.Junit单元测试在MVC下的使用。

## 明日计划
1.更深入的了解这个小方法为什么要这么写，打通有关这个小方法的大部分细节。

2.根据Confliuence上的Prophet以及今天看的部门工作，了解产品。

3.学习Java注解，思考在我们项目中用到的这些注解都是如何生效的。

## 技术总结
构造函数中不要抛出异常，在构造函数中抛出的异常程序员无法处理。

异常这块学习的不够深入，有时间可以深入学习，明天先看注解那章。

有两种异常，非受检异常在开发中需要尽量避免，RuntimeException和Error。

由于构造函数不存在复写的概念，是子类调用父类代码，允许子类抛出更广泛的异常，但是由于父类抛出的范围会比子类小，遇到更广泛的类只能增加catch代码解决。

另外里氏替换原则，父类出现的地方子类就可以出现，使用子类不会造成任何问题，但在构造函数存在能够抛出异常的情况下就会造成问题。

子类调用了父类的构造方法，必须同样有抛出Exception的代码，因此增加了代码量。
