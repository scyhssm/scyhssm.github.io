---
layout:     post
title:      "定制自己的LFS系统"
subtitle:   "Customize LFS by scyhssm"
date:       2017-11-06 12:00:00
author:     "scyhssm"
header-img: "img/LFS.png"
header-mask: 0.3
catalog:    true
tags:
    - LFS
    - DIY
---

>通过LFS构建系统可以帮助我们更深入地了解Linux架构，熟悉Linux系统

## 中科大镜像下载地址
找了下，很多镜像站没有LFS，中科大的比较全，大多数版本都有覆盖，LFS-BOOK版本是8.0，因此选择8.0的lfs包，该博客选择的系统为centos6.5，如果需要，可以调整内存大小和核心数量，在构建LFS时一些步骤可能要消耗大量时间。  
我选择了1G内存和1个核心，因为事情较多，打算在编译测试安装时做些别的作业。[ 中科大镜像 ](http://mirrors.ustc.edu.cn/lfs/lfs-packages/8.0/)
## 宿主软件准备
找一个习惯的位置，直接键入以下脚本，检查软件包版本及编译环境是否妥当，不存在的安装，一些版本较低的再比较升级。  
在我的centos6.5机器中，过旧需要升级安装的工具是Gawk，GCC，Textinfo，Xz，再将yacc软链接到bison，宿主系统的工具准备完成。升级完再测测看，对照下有没有落后8.0推荐版本的工具。
```
cat > version-check.sh << "EOF"
#!/bin/bash
# Simple script to list version numbers of critical development tools
export LC_ALL=C
bash --version | head -n1 | cut -d" " -f2-4
MYSH=$(readlink -f /bin/sh)
echo "/bin/sh -> $MYSH"
echo $MYSH | grep -q bash || echo "ERROR: /bin/sh does not point to bash"
unset MYSH
echo -n "Binutils: "; ld --version | head -n1 | cut -d" " -f3-
bison --version | head -n1
if [ -h /usr/bin/yacc ]; then
  echo "/usr/bin/yacc -> `readlink -f /usr/bin/yacc`";
elif [ -x /usr/bin/yacc ]; then
  echo yacc is `/usr/bin/yacc --version | head -n1`
else
  echo "yacc not found"
fi
bzip2 --version 2>&1 < /dev/null | head -n1 | cut -d" " -f1,6-
echo -n "Coreutils: "; chown --version | head -n1 | cut -d")" -f2
diff --version | head -n1
find --version | head -n1
gawk --version | head -n1
if [ -h /usr/bin/awk ]; then
  echo "/usr/bin/awk -> `readlink -f /usr/bin/awk`";
elif [ -x /usr/bin/awk ]; then
  echo awk is `/usr/bin/awk --version | head -n1`
else
  echo "awk not found"
fi
gcc --version | head -n1
g++ --version | head -n1
ldd --version | head -n1 | cut -d" " -f2-  # glibc version
grep --version | head -n1
gzip --version | head -n1
cat /proc/version
m4 --version | head -n1
make --version | head -n1
patch --version | head -n1
echo Perl `perl -V:version`
sed --version | head -n1
tar --version | head -n1
makeinfo --version | head -n1
xz --version | head -n1
echo 'int main(){}' > dummy.c && g++ -o dummy dummy.c
if [ -x dummy ]
  then echo "g++ compilation OK";
  else echo "g++ compilation failed"; fi
rm -f dummy.c dummy
EOF
bash version-check.sh
```
yacc缺失，可以用bison链接
```
ln /usr/bin/bison /usr/bin/yacc
```
yum安装官方镜像源GCC，G++
```
yum -y install gcc gcc-c++
wget http://mirrors.ustc.edu.cn/gnu/gcc/gcc-5.2.0/gcc-5.2.0.tar.gz
tar -zxvf gcc-5.2.0.tar.gz
cd /root/Downloads/gcc-5.2.0
./contrib/download_prerequisites
cd ..
mkdir gcc-build-5.2.0
cd gcc-build-5.2.0
cd ..
./configure --enable-checking=release --enable-languages=c,c++ --disable-multilib
make
make install
```
更新库和符号链接
```
cp /home/songcongyi/Downloads/gcc-5.2.0/prev-x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.21 /usr/lib64
ln -sf /usr/lib64/libstdc++.so.6.0.21 /usr/lib64/libstdc++.so.6
gcc --version #查看gcc版本
g++ --version
```
下载安装gawk，采用4.1.4版本
```
wget http://mirrors.ustc.edu.cn/gnu/gawk/gawk-4.1.4.tar.gz
tar xvzf gawk-4.1.4.tar.gz
cd gawk-4.1.4
./configure
make && make install
rm -rf /usr/bin/awk
ln -sv /usr/local/bin/gawk /usr/bin/awk
```
安装xz
```
wget http://mirrors.ustc.edu.cn/lfs/lfs-packages/8.0/xz-5.2.3.tar.xz
xz -d xz-5.2.3.tar.xz
tar xvf xz-5.2.3.tar
make && make install
```
直接用yum安装texinfo
```
yum install texinfo
```
库文件的一致性检查，不存在的安装，一搬gmp,mpfr,mpc都缺失不会有问题，但缺失一到两个就有问题了
```
cat > library-check.sh << "EOF"
#!/bin/bash
for lib in lib{gmp,mpfr,mpc}.la; do
  echo $lib: $(if find /usr/lib* -name $lib|
               grep -q $lib;then :;else echo not;fi) found
done
unset lib
EOF
bash library-check.sh
```
## 分阶段构建LFS
这边磁盘的空间设计是个大问题，之前因为磁盘分区设置不妥，结果导致再为分区新加空间一直有问题，而且本来就有很多小状况，就索性回炉重造。  
新装一块120G的磁盘，将该磁盘分割为／主分区20G，swap 主分区 4G，／boot 主分区 100MB，／usr/local 逻辑分区 30G，/tmp 逻辑分区 4G，/usr/src 逻辑分区 30G，/home 逻辑分区 其余所有（我是被吓怕了，所以这么分空间，其实大可不必完全按照LFS-BOOK上面的磁盘分割来）。  
比较推荐的分割方法是划30个G，／boot 100MB，／ 25GB，swap 2G。  
/boot存储内核和其他启动信息，／分区之前按照推荐的分了10G后来才发现不够，多分一些，因为我内存给的少，所以交换分区2G。  
fdisk /dev/sdb 将磁盘分区，具体指令用法可以用来看。除了swap分区，其他分区都是ext4文件格式。要正确改变swap分区，需要t,82改变改分区类型。  
通过vi ~./bashrc 编辑LFS变量，以后可以直接$LFS使用。  
```
export LFS=/mnt/lfs
```
利用脚本快速分区
```
vi disk-partition.sh
#!/bin/bash
echo "
n
p
1
1
+20480M
n
p
2
2613
+4096M
n
p
3
3136
+100M
n
e
3150
15665
n
3150
+30720M
n
7067
+4096M
n
7590
+30720M
n
11507
15665
t
2
82
w
" | fdisk /dev/sdb
bash disk-partition.sh
```
在/mnt下创建文件夹，格式化分区并挂载，其实只推荐三个分区，swap，/，/boot
```
mkdir -pv $LFS
mkfs -v -t ext4 /dev/sdb1
mount -v -t ext4 /dev/sdb1 $LFS
mkswap /dev/sdb2
swapon -v /dev/sdb2
mkdir -pv $LFS/boot
mkfs -v -t ext4 /dev/sdb3
mount -v -t ext4 /dev/sdb3 $LFS/boot
mkdir -pv $LFS/usr/local
mkfs -v -t ext4 /dev/sdb5
mount -v -t ext4 /dev/sdb5 $LFS/usr/local
mkdir -pv $LFS/tmp
mkfs -v -t ext4 /dev/sdb6
mount -v -t ext4 /dev/sdb6 $LFS/tmp
mkdir -pv $LFS/usr/src
mkfs -v -t ext4 /dev/sdb7
mount -v -t ext4 /dev/sdb7 $LFS/usr/src
mkdir -pv $LFS/home
mkfs -v -t ext4 /dev/sdb8
mount -v -t ext4 /dev/sdb8 $LFS/home
swapon -v /dev/sdb2
df -lh  #查看挂载情况
```
创建sources文件夹，用来存放构建LFS的软件。下载软件包验证文件正确性,需要先下载wget-list和md5sums
```
mkdir -v $LFS/sources
chmod a+wt $LFS/sources #设置目录的写和粘滞模式，粘滞即只有所有者可以删除文件
wget -i /home/songcongyi/Downloads/wget-list -P $LFS/sources  #下载wget-list用来批量下载软件包
```
下载md5校验文件,放到/home/songcongyi/Downloads下,可以在正式开始前检查所有文件是否正确,如果没有的文件可以再到镜像站下载单独上传到sources文件夹下
```
cp ／home/songcongyi/Downloads/md5sums $LFS/sources
pushd $LFS/sources   #压入一个工作空间，这样可以从一个工作空间快速恢复到另一个工作空间
md5sum -c md5sums
popd
```
## 构建临时系统前最终准备
要在$LFS中新建一个文件夹用于临时工具的安装，增加一个非特权用户来降低风险，并为其创建合适的构建环境。  
在LFS-BOOK中有说明构建各个软件包需要花费的时间，这里忽略，但会指出特别耗时的软件包。
### 创建$LFS/tools文件夹
可以临时使用主机的某些软件而不对原主机构成影响
```
mkdir -v $LFS/tools
ln -sv $LFS/tools /  #在宿主系统中创建/tools的符号链接
```
以root用户登陆系统，一些小错误可能带来无法逆转的破坏，我们要以非特权用户编译软件包。
```
groupadd lfs
useradd -s /bin/bash -g lfs -m -k /dev/null lfs
passwd lfs
chown -v lfs /mnt/lfs/tools/
chown -v lfs $LFS/sources
su - lfs #以lfs登陆
```
确保构建的shell环境完全为新的空环境，即确保主机系统中的危险环境变量不进入构建的环境中，目的是为了有一个干净的环境。
```
cat > ~/.bash_profile << "EOF"
exec env -i HOME=$HOME TERM=$TERM PS1='\u:\w\$ ' /bin/bash
EOF
```
set +h  hash表，可以记住命令的完整路径，不用重复去找，提高效率。  
umask 022  确保新创建的文件和目录只能由owner写入，但是任何人可以读取和执行。  
LFS=/mnt/lfs  目录环境变量。  
LC_ALL=POSIX  遵循POSIX规则，确保chroot环境中的的正常工作。  
LFS_TGT=$(uname -m)-lfs-linux-gnu  当编译我们的交叉编译器和链接器以及交叉编译我们的临时工具链时，LFS_TGT变量设置了一个非默认，但兼容的机器说明。  
PATH=/tools/bin:/bin:/usr/bin  把/tools/bin放到标准的PATH变量前面，这样使后续安装的新版本的命令后，去使用新版本的命令，而不会使用旧版本命令。  
export LFS LC_ALL LFS_TGT PATH 这里把上述变量变为环境变量。  
```
cat > ~/.bashrc << "EOF"
set +h
umask 022
LFS=/mnt/lfs
LC_ALL=POSIX
LFS_TGT=$(uname -m)-lfs-linux-gnu
PATH=/tools/bin:/bin:/usr/bin
export LFS LC_ALL LFS_TGT PATH
EOF
```
应用用户配置，为生成临时工具完全准备好环境：
```
source ~/.bash_profile
```
如果为处理器分配两个核心，想要并行编译减少编译时间，可以通过下面方法。不过错误日志分析会很困难，因为不同编译器执行路线是交错的。
```
export MAKEFLAGS='-j 2'  #或者make -j2
```
## 构建最小的Linux系统
构建该系统有两个步骤，第一步是构建一个宿主系统无关的新工具链（编译器、汇编器、链接器、库和一些有用的工具）。第二步则是使用该工具链构建其它的基础工具。  
该章的总体目标是生成一个临时的系统，*它包含一个已知的较好工具集，该工具集可与宿主系统分离*。  
通过使用 chroot，其余各章中的命令将被包含在此环境中，以保证目标 LFS 系统能够洁净且无故障地生成。  
构建前检查,sh 是到 bash 的符号链接,/usr/bin/awk 是到 gawk 的符号链接,/usr/bin/yacc 是到 bison 的符号链接或者一个执行 bison 的小脚本。  
把源文件和补丁放到chroot环境可访问的目录。  
不能放到/mnt/lfs/tools中，因为这是一个符号链接。  
```
echo $LFS
ls -l `which sh` `which awk` `which yacc`
```
### 安装Binutils
binutils软件包包含一个链接器，一个汇编器，以及其他处理目标文件的工具。  
解压并创建build编译目录，起先几步都写上了解压工具和到工具目录下这两行代码，后面将省略。同时建议二次编译时用make mrproper,删除之前编译生成的文件和配置文件。
```
cd $LFS/sources
tar -xvf binutils-2.27.tar.bz2
cd binutils-2.27
mkdir build
cd build/
```
--prefix=/tools  
告诉配置脚本将 Binutils 程序安装到 /tools 文件夹。  
--with-sysroot=$LFS  
用于交叉编译，告诉编译系统在 $LFS 中查找所需的目标系统库。  
--with-lib-path=/tools/lib  
指定需要配置使用的链接器的库路径。  
--target=$LFS_TGT  
因为 LFS_TGT 变量中的机器描述和 config.guess 脚本返回的值略有不同，这个选项会告诉 configure 脚 本调整 Binutils 的编译系统来编译一个交叉链接器。  
--disable-nls  
这会禁止国际化(i18n)，因为国际化对临时工具来说没有必要。  
--disable-werror  
这会防止来自宿主编译器的警告事件导致停止编译。  
```
../configure --prefix=/tools            \
             --with-sysroot=$LFS        \
             --with-lib-path=/tools/lib \
             --target=$LFS_TGT          \
             --disable-nls              \
             --disable-werror
```
编译
```
make
```
如果是在 x86_64 上编译，创建符号链接，以确保工具链的完整性，创建lib64和lib文件夹
```
case $(uname -m) in
  x86_64) mkdir -v /tools/lib && ln -sv lib /tools/lib64 ;;
esac
```
安装软件包
```
make install
```
### GCC
其需要 GMP、 MPFR 和 MPC 软件包，将其和GCC一起编译
```
cd $LFS/sources
tar -xvf gcc-6.3.0.tar.bz2
cd gcc-6.3.0
tar -xf ../mpfr-3.1.5.tar.xz
mv -v mpfr-3.1.5 mpfr
tar -xf ../gmp-6.1.2.tar.xz
mv -v gmp-6.1.2/ gmp
tar -xf ../mpc-1.0.3.tar.gz
mv -v mpc-1.0.3 mpc
```
下面的指令将会修改 GCC 默认的动态链接器为安装在 /tools 文件夹中的。它也会从 GCC 的 include 搜索 路径中移除 /usr/include。
```
for file in gcc/config/{linux,i386/linux{,64}}.h
do
  cp -uv $file{,.orig}
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
      -e 's@/usr@/tools@g' $file.orig > $file
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
  touch $file.orig
done
```
在 x86_64 的主机上，为 64 位的库设置默认目录名至 “lib”
```
case $(uname -m) in
  x86_64)
    sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
;;
esac
```
GCC 手册建议在源文件夹之外一个专门的编译文件夹中编译 GCC
```
mkdir -v build
cd build
```
准备编译GCC，配置选项不解释
```
../configure                                       \
    --target=$LFS_TGT                              \
    --prefix=/tools                                \
    --with-glibc-version=2.11                      \
    --with-sysroot=$LFS                            \
    --with-newlib                                  \
    --without-headers                              \
    --with-local-prefix=/tools                     \
    --with-native-system-header-dir=/tools/include \
    --disable-nls                                  \
    --disable-shared                               \
    --disable-multilib                             \
    --disable-decimal-float                        \
    --disable-threads                              \
    --disable-libatomic                            \
    --disable-libgomp                              \
    --disable-libmpx                               \
    --disable-libquadmath                          \
    --disable-libssp                               \
    --disable-libvtv                               \
    --disable-libstdcxx                            \
    --enable-languages=c,c++
```
编译加安装
```
make
make install
```
### Linux API 头文件
Linux API会将内核API导出给Glibc使用。
```
cd $LFS/sources
tar -xvf linux-4.9.9.tar.gz
cd linux-4.9.9
make mrproper #确认这里没有陈旧的文件且不依赖于之前的操作
make INSTALL_HDR_PATH=dest headers_install  #从源代码中提取用户可见的内核头文件
cp -rv dest/include/* /tools/include #把他们保存在一个临时本地文件夹中然后复制到所需的位置，因为解压过程会移除目标文件夹中任何已有的文件
```
### Glibc-2.25
包含了主要的C函数库，提供了分配内存、搜索目录、打开关闭文件、读写文件等基本程序。
```
cd $LFS/sources
tar -xvf glibc-2.25.tar.xz
cd glibc-2.25
mkdir -v build
cd build
../configure                             \
      --prefix=/tools                    \
      --host=$LFS_TGT                    \
      --build=$(../scripts/config.guess) \
      --enable-kernel=2.6.32             \
      --with-headers=/tools/include      \
      libc_cv_forced_unwind=yes          \
      libc_cv_c_cleanup=yes
make
make install
```
在安装glibc-2.25后要进行检查
```
echo 'int main(){}' > dummy.c
$LFS_TGT-gcc dummy.c
readelf -l a.out | grep ': /tools'
```
若工作正常，应没有错误，最后一个命令的输出形式：[Requesting program interpreter: /tools/lib/ld-linux.so.2]
```
rm -v dummy.c a.out #一切顺利清理测试文件
```
### Libstdc++
标准的c++库，g++编译器正确运行需要它。
```
cd $LFS/sources/gcc-6.3.0
cd libstdc++-v3/
mkdir -v build
cd build
../configure                        \
    --host=$LFS_TGT                 \
    --prefix=/tools                 \
    --disable-multilib              \
    --disable-nls                   \
    --disable-libstdcxx-threads     \
    --disable-libstdcxx-pch         \
    --with-gxx-include-dir=/tools/$LFS_TGT/include/c++/6.3.0
make
make install
```
### 安装Binutils第二部分
```
mkdir -v build2
cd build2
CC=$LFS_TGT-gcc                \
AR=$LFS_TGT-ar                 \
RANLIB=$LFS_TGT-ranlib         \
../configure                   \
    --prefix=/tools            \
    --disable-nls              \
    --disable-werror           \
    --with-lib-path=/tools/lib \
    --with-sysroot
make
make install
```
为“Re-adjusting”阶段准备链接器
```
make -C ld clean
make -C ld LIB_PATH=/usr/lib:/lib
cp -v ld/ld-new /tools/bin
```
### 安装GCC第二部分
第一次编译 gcc 的时候 / tools/include/limits.h 并不存在，因此 GCC 安装的内部头文件只是部分的自包含文件，并不包括系 统头文件的扩展功能。  
这足以编译临时 libc，但是这次编译 GCC 要求完整的内部头文件。  
```
cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
  `dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/include-fixed/limits.h
```
修改GCC默认动态链接器位置，使用安装在/tools那个
```
for file in gcc/config/{linux,i386/linux{,64}}.h
do
  cp -uv $file{,.orig}
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
      -e 's@/usr@/tools@g' $file.orig > $file
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
  touch $file.orig
done
```
在86_64上配置，修改成64位库至lib
```
case $(uname -m) in
  x86_64)
    sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
;;
esac
```
build2，也可以make mrproper
```
mkdir -v build2
cd   build2
CC=$LFS_TGT-gcc                                    \
CXX=$LFS_TGT-g++                                   \
AR=$LFS_TGT-ar                                     \
RANLIB=$LFS_TGT-ranlib                             \
../configure                                       \
    --prefix=/tools                                \
    --with-local-prefix=/tools                     \
    --with-native-system-header-dir=/tools/include \
    --enable-languages=c,c++                       \
    --disable-libstdcxx-pch                        \
    --disable-multilib                             \
    --disable-bootstrap                            \
    --disable-libgomp
make && make install
```
这里创建一个符号链接，很多程序和脚本执行cc而不是gcc来保证程序的通用型。
```
ln -sv gcc /tools/bin/cc
```
进行全面检查
```
echo 'int main(){}' > dummy.c
cc dummy.c
readelf -l a.out | grep ': /tools'
#[Requesting program interpreter: /tools/lib/ld-linux.so.2] 一切正常显示
rm -v dummy.c a.out
```
### Tcl-core-8.6.6
包含工具命令语言相关程序，此软件包和后面三个包(Expect、 DejaGNU 和 Check)用来为 GCC 和 Binutils 还有其他的一些软件包的测试套件提供运行支持。后面舍去了一些重复无意义的解释。
```
tar -xvf tcl-core8.6.6-src.tar.gz
cd tcl8.6.6/
cd unix/
./configure --prefix=/tools
make
TZ=UTC make test
make install
chmod -v u+w /tools/lib/libtcl8.6.so
make install-private-headers
ln -sv tclsh8.6 /tools/bin/tclsh
```
### expect
包含一个实现用脚本和其他交互式程序进行对话的程序。
```
tar -xvf  expect5.45.tar.gz
cd expect5.45
cp -v configure{,.orig}
sed 's:/usr/local/bin:/bin:' configure.orig > configure
./configure --prefix=/tools       \
            --with-tcl=/tools/lib \
            --with-tclinclude=/tools/include
make && make test && make SCRIPTS="" install
```
### DejaGNU-1.6
包含了测试其他程序的框架
```
tar -xvf dejagnu-1.6.tar.gz
cd dejagnu-1.6
./configure --prefix=/tools
make install && make check
```
### Check
c语言单元测试框架
```
tar -xvf check-0.11.0.tar.gz
cd check-0.11.0
PKG_CONFIG= ./configure --prefix=/tools
make && make check && make install
```
### Ncurses-6.0
包含用于不依赖于特定终端的字符屏幕处理的库
```
tar -xvf ncurses-6.0.tar.gz
cd ncurses-6.0
sed -i s/mawk// configure
./configure --prefix=/tools \
            --with-shared   \
            --without-debug \
            --without-ada   \
            --enable-widec  \
            --enable-overwrite
make && make install
```
### Bash-4.4
包含bourne-again shell
```
tar -xvf bash-4.4.tar.gz
cd bash-4.4
./configure --prefix=/tools --without-bash-malloc
make && make install && ln -sv bash /tools/bin/sh
```
### Bison-3.0.4
包含一个语法生成器
```
tar -xvf bison-3.0.4.tar.xz
cd bison-3.0.4
./configure --prefix=/tools
make && make check && make install
```
### bzip2-1.0.6
包含压缩和解压缩的程序
```
tar -xvf bzip2-1.0.6.tar.gz
cd bzip2-1.0.6
make
make PREFIX=/tools install
```
### coreutils-3.5
包含用于显示和设置基本系统特性的工具
```
tar -xvf coreutils-8.26.tar.xz
cd coreutils-8.26
./configure --prefix=/tools --enable-install-program=hostname
make && make install
```
### diffutils
包含显示文件和目录差异的程序
```
tar -xvf diffutils-3.5.tar.xz
cd diffutils-3.5
./configure --prefix=/tools
make && make install
```
### file
包含判断给定的某个或者某些文件类型的工具
```
tar -xvf file-5.30.tar.gz
cd file-5.30
./configure --prefix=/tools
make && make install
```
### Findutils-4.6.0
包含查找文件的程序
```
tar -xvf findutils-4.6.0.tar.gz
cd findutils-4.6.0
./configure --prefix=/tools
make && make install
```
### gawk
包含操作文本文件的程序
```
tar -xvf gawk-4.1.4.tar.xz
cd gawk-4.1.4
./configure --prefix=/tools
make && make install
```
### Gettext-0.19.8.1
包含用于国际化和地区化的工具
```
tar -xvf gettext-0.19.8.1.tar.xz
cd gettext-0.19.8.1
cd gettext-tools/
EMACS="no" ./configure --prefix=/tools --disable-shared
make -C gnulib-lib
make -C intl pluralx.c
make -C src msgfmt
make -C src msgmerge
make -C src xgettext
cp -v src/{msgfmt,msgmerge,xgettext} /tools/bin
```
### Grep-3.0
包含用于在文件中搜索的程序
```
tar -xvf grep-3.0.tar.xz
cd grep-3.0
./configure --prefix=/tools
make && make install
```
### Gzip-1.8
包含用于压缩和解压文件的程序
```
tar -xvf gzip-1.8.tar.xz
cd gzip-1.8
./configure --prefix=/tools
make
make install
```
### M4-1.4.18
包含一个宏处理器
```
tar -xvf m4-1.4.18.tar.xz
cd m4-1.4.18
./configure --prefix=/tools
make
make install
```
### make
包含一个用于编译软件的程序
```
tar -xvf make-4.2.1.tar.bz2
cd make-4.2.1
./configure --prefix=/tools --without-guile
make && make install
```
### Patch-2.7.5
包含一个通过打补丁创建或修改文件的程序
```
tar -xvf patch-2.7.5.tar.xz
cd  patch-2.7.5
./configure --prefix=/tools
make
make install
```
### Perl-5.24.1
包含使用信息抽取与报告语言
```
tar -xvf perl-5.24.1.tar.bz2
cd perl-5.24.1
sh Configure -des -Dprefix=/tools -Dlibs=-lm
make
cp -v perl cpan/podlators/scripts/pod2man /tools/bin
mkdir -pv /tools/lib/perl5/5.24.1
cp -Rv lib/* /tools/lib/perl5/5.24.1
```
### Sed-4.4
包含流编辑器
```
tar -xvf sed-4.4.tar.xz
cd sed-4.4
./configure --prefix=/tools
make && make install
```
### Tar
包含归档程序
```
tar -xvf tar-1.29.tar.xz
cd tar-1.29
./configure --prefix=/tools
make
make install
```
### Texinfo-6.3
包含用于读写以及转换信息页的程序
```
tar -xvf texinfo-6.3.tar.xz
cd texinfo-6.3
./configure --prefix=/tools
make && make install
```
### Util-linux-2.29.1
包含了各种各样的小工具
```
tar -xvf util-linux-2.29.1.tar.xz
cd util-linux-2.29.1
./configure --prefix=/tools                \
            --without-python               \
            --disable-makeinstall-chown    \
            --without-systemdsystemunitdir \
            PKG_CONFIG=""
make && make install
```
### Xz-5.2.3
包含了压缩和解压文件的程序
```
tar -xvf xz-5.2.3.tar.xz
cd xz-5.2.3
./configure --prefix=/tools
make && make install
```
### 清理无用内容
需要为下一阶段编译安装glibc和gcc预留至少3GB空间，下一阶段如果有经验，可以将安装过的大的软件包删除。
```
strip --strip-debug /tools/lib/*
/usr/bin/strip --strip-unneeded /tools/{,s}bin/*
rm -rf /tools/{,share}/{info,man,doc}
```
### 改变属主
以后部分的命令都必须以root用户身份执行而不再是lfs用户。另外，再次确认下$LFS变量在root用户环境下也有定义。
```
chown -R root:root $LFS/tools
```
## 构建LFS系统
在这里，我们会进入构建环境然后开始认真构建LFS系统。我们会chroot进入之前准备好的临时迷你Linux系统，同时需要严格遵守安装软件包的顺序。  
### 准备虚拟内核文件系统
内核会挂载几个文件系统用于自己和用户空间程序交换信息。这些文件系统是虚拟的，并不占用实际磁盘空间，它们的内容会放在内存里。  
开始先创建将用来挂载文件系统的目录:  
```
mkdir -pv $LFS/{dev,proc,sys,run}
```
在内核引导系统的时候，它依赖于几个设备节点，特别是 console 和 null 两个设备。设备点必须创建在 硬盘上以保证在 udevd 启动前是可用的，特别是在使用 init=/bin/bash 启动 Linux 时。  
运行以下命令创建设备节点
```
mknod -m 600 $LFS/dev/console c 5 1
mknod -m 666 $LFS/dev/null c 1 3
```
挂载和激活 /dev
```
mount -v --bind /dev $LFS/dev
```
挂载虚拟文件系统
```
mount -vt devpts devpts $LFS/dev/pts -o gid=5,mode=620
mount -vt proc proc $LFS/proc
mount -vt sysfs sysfs $LFS/sys
mount -vt tmpfs tmpfs $LFS/run
```
在某些宿主机系统里，/dev/shm 是一个指向 /run/shm 的软链接。这个 /run 下的 tmpfs 文件系统已经在 之前挂载了，所以在这里只需要创建一个目录。
```
if [ -h $LFS/dev/shm ]; then
  mkdir -pv $LFS/$(readlink $LFS/dev/shm)
fi
```
以 root 用户运行下面的命令进入此环境,I have no name! 这是正常的
```
chroot "$LFS" /tools/bin/env -i \
    HOME=/root                  \
    TERM="$TERM"                \
    PS1='\u:\w\$ '              \
    PATH=/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin \
    /tools/bin/bash --login +h
```
后续章节中的命令都要在 chroot 环境下运行。如果因为某种原因(比如说 重启)离开了这个环境。  
请保证要按照挂载和激活 /dev和挂载虚拟文件系统中所说的那样挂载虚拟内核文件系统，并在继续构建之前重新运行 chroot 进入环境。  
准备创建 LFS 文件系统里的一些目录结构（不要重复创建）。
```
mkdir -pv /{bin,boot,etc/{opt,sysconfig},home,lib/firmware,mnt,opt}
mkdir -pv /{media/{floppy,cdrom},sbin,srv,var}
install -dv -m 0750 /root
install -dv -m 1777 /tmp /var/tmp
mkdir -pv /usr/{,local/}{bin,include,lib,sbin,src}
mkdir -pv /usr/{,local/}share/{color,dict,doc,info,locale,man}
mkdir -v  /usr/{,local/}share/{misc,terminfo,zoneinfo}
mkdir -v  /usr/libexec
mkdir -pv /usr/{,local/}share/man/man{1..8}
case $(uname -m) in
 x86_64) mkdir -v /lib64 ;;
esac
mkdir -v /var/{log,mail,spool}
ln -sv /run /var/run
ln -sv /run/lock /var/lock
mkdir -pv /var/{opt,cache,lib/{color,misc,locate},local}
```
### 创建必要的文件和符号链接
有些程序里会使用写死的路径调用其它暂时还未安装的程序。为了满足这种类型程序的需要，我们将创建一些符号链接，替代之前的符号链接
```
ln -sv /tools/bin/{bash,cat,echo,pwd,stty} /bin
ln -sv /tools/bin/perl /usr/bin
ln -sv /tools/lib/libgcc_s.so{,.1} /usr/lib
ln -sv /tools/lib/libstdc++.so{,.6} /usr/lib
sed 's/tools/usr/' /tools/lib/libstdc++.la > /usr/lib/libstdc++.la
ln -sv bash /bin/sh
ln -sv /proc/self/mounts /etc/mtab
```
创建/etc/passwd
```
cat > /etc/passwd << "EOF"
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/dev/null:/bin/false
daemon:x:6:6:Daemon User:/dev/null:/bin/false
messagebus:x:18:18:D-Bus Message Daemon User:/var/run/dbus:/bin/false
nobody:x:99:99:Unprivileged User:/dev/null:/bin/false
EOF
```
创建 /etc/group
```
cat > /etc/group << "EOF"
root:x:0:
bin:x:1:daemon
sys:x:2:
kmem:x:3:
tape:x:4:
tty:x:5:
daemon:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
dialout:x:10:
audio:x:11:
video:x:12:
utmp:x:13:
usb:x:14:
cdrom:x:15:
adm:x:16:
messagebus:x:18:
systemd-journal:x:23:
input:x:24:
mail:x:34:
nogroup:x:99:
users:x:999:
EOF
```
打开新shell
```
exec /tools/bin/bash --login +h
```
初始化日志文件
```
touch /var/log/{btmp,lastlog,faillog,wtmp}
chgrp -v utmp /var/log/lastlog
chmod -v 664  /var/log/lastlog
chmod -v 600  /var/log/btmp
```
### Linux API
会将内核API导出给glibc使用
```
make mrproper
make INSTALL_HDR_PATH=dest headers_install
find dest/include \( -name .install -o -name ..install.cmd \) -delete
cp -rv dest/include/* /usr/include
```
### man pages
包含了超过2200份man手册页面
```
tar -xvf man-pages-4.09.tar.xz
cd man-pages-4.09
make install
```
### 安装glibc
包含了主要的c函数库
```
rm -r glibc-2.25
patch -Np1 -i ../glibc-2.25-fhs-1.patch
case $(uname -m) in
    x86) ln -s ld-linux.so.2 /lib/ld-lsb.so.3
    ;;
    x86_64) ln -s ../lib/ld-linux-x86-64.so.2 /lib64
            ln -s ../lib/ld-linux-x86-64.so.2 /lib64/ld-lsb-x86-64.so.3
    ;;
esac
mkdir -v build
cd build
../configure --prefix=/usr                   \
             --enable-kernel=2.6.32          \
             --enable-obsolete-rpc           \
             --enable-stack-protector=strong \
             libc_cv_slibdir=/lib
make
make check
touch /etc/ld.so.conf
make install
cp -v ../nscd/nscd.conf /etc/nscd.conf
mkdir -pv /var/cache/nscd
mkdir -pv /usr/lib/locale
localedef -i cs_CZ -f UTF-8 cs_CZ.UTF-8
localedef -i de_DE -f ISO-8859-1 de_DE
localedef -i de_DE@euro -f ISO-8859-15 de_DE@euro
localedef -i de_DE -f UTF-8 de_DE.UTF-8
localedef -i en_GB -f UTF-8 en_GB.UTF-8
localedef -i en_HK -f ISO-8859-1 en_HK
localedef -i en_PH -f ISO-8859-1 en_PH
localedef -i en_US -f ISO-8859-1 en_US
localedef -i en_US -f UTF-8 en_US.UTF-8
localedef -i es_MX -f ISO-8859-1 es_MX
localedef -i fa_IR -f UTF-8 fa_IR
localedef -i fr_FR -f ISO-8859-1 fr_FR
localedef -i fr_FR@euro -f ISO-8859-15 fr_FR@euro
localedef -i fr_FR -f UTF-8 fr_FR.UTF-8
localedef -i it_IT -f ISO-8859-1 it_IT
localedef -i it_IT -f UTF-8 it_IT.UTF-8
localedef -i ja_JP -f EUC-JP ja_JP
localedef -i ru_RU -f KOI8-R ru_RU.KOI8-R
localedef -i ru_RU -f UTF-8 ru_RU.UTF-8
localedef -i tr_TR -f UTF-8 tr_TR.UTF-8
localedef -i zh_CN -f GB18030 zh_CN.GB18030
```
配置Glibc
```
cat > /etc/nsswitch.conf <<  "EOF"
# Begin /etc/nsswitch.conf
passwd: files
group: files
shadow: files
hosts: files dns
networks: files
protocols: files
services: files
ethers: files
rpc: files
# End /etc/nsswitch.conf
EOF
#添加时区数据
tar -xf ../../tzdata2016j.tar.gz
ZONEINFO=/usr/share/zoneinfo
mkdir -pv $ZONEINFO/{posix,right}
for tz in etcetera southamerica northamerica europe africa antarctica  \
          asia australasia backward pacificnew systemv; do
    zic -L /dev/null   -d $ZONEINFO       -y "sh yearistype.sh" ${tz}
    zic -L /dev/null   -d $ZONEINFO/posix -y "sh yearistype.sh" ${tz}
    zic -L leapseconds -d $ZONEINFO/right -y "sh yearistype.sh" ${tz}
done
cp -v zone.tab zone1970.tab iso3166.tab $ZONEINFO
zic -d $ZONEINFO -p America/New_York
unset ZONEINFO
tzselect
cp -v /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
#配置动态链接库
cat > /etc/ld.so.conf << "EOF"
# Begin /etc/ld.so.conf
/usr/local/lib
/opt/lib
EOF
cat >> /etc/ld.so.conf << "EOF"
# Add an include directory
include /etc/ld.so.conf.d/*.conf
EOF
mkdir -pv /etc/ld.so.conf.d
```
### 调整工具链
让新编译的程序链接到新的库上
```
mv -v /tools/bin/{ld,ld-old}
mv -v /tools/$(uname -m)-pc-linux-gnu/bin/{ld,ld-old}
mv -v /tools/bin/{ld-new,ld}
ln -sv /tools/bin/ld /tools/$(uname -m)-pc-linux-gnu/bin/ld
gcc -dumpspecs | sed -e 's@/tools@@g'                   \
    -e '/\*startfile_prefix_spec:/{n;s@.*@/usr/lib/ @}' \
    -e '/\*cpp:/{n;s@$@ -isystem /usr/include@}' >      \
    `dirname $(gcc --print-libgcc-file-name)`/specs
echo 'int main(){}' > dummy.c
cc dummy.c -v -Wl,--verbose &> dummy.log
readelf -l a.out | grep ': /lib'
#确认正确配置
grep -o '/usr/lib.*/crt[1in].*succeeded' dummy.log
#结果 /usr/lib/../lib/crt1.o succeeded
#/usr/lib/../lib/crti.o succeeded
#/usr/lib/../lib/crtn.o succeeded
grep -B1 '^ /usr/include' dummy.log
#结果  #inlcude <...> search starts here:
#/usr/include
grep 'SEARCH.*/usr/lib' dummy.log |sed 's|; |\n|g'
#结果 SEARCH_DIR("/lib")
#SEARCH_DIR("/usr/lib")
grep "/lib.*/libc.so.6 " dummy.log
#结果 attempt to open /lib/libc.so.6 succeeded
grep found dummy.log
#结果 found ld-linux-x86-64.so.2 at /lib/ld-linux-x86-64.so.2
rm -v dummy.c a.out dummy.log
```
### zlib
包含一些程序使用的压缩和解压缩例程
```
tar xvf zlib-1.2.11.tar.xz
cd zlib-1.2.11
./configure --prefix=/usr
make
make check
make install
mv -v /usr/lib/libz.so.* /lib
ln -sfv ../../lib/$(readlink /usr/lib/libz.so) /usr/lib/libz.so
```
### file
一些之前解释过的工具在这里以后出现不再解释，有困惑可以前翻
```
tar xvf file-5.30.tar.gz
cd file-5.30
./configure --prefix=/usr
make
make check
make install
```
### Binutils
```
expect -c "spawn ls" #验证 应该输出spawn ls
tar -xvf binutils-2.27.tar.bz2
cd binutils-2.27
mkdir -v build
cd build/
../configure --prefix=/usr       \
             --enable-gold       \
             --enable-ld=default \
             --enable-plugins    \
             --enable-shared     \
             --disable-werror    \
             --with-system-zlib
make tooldir=/usr
make -k check
make tooldir=/usr install
```
### GMP
包含一些数学库，又对精度数值计算很有用的函数。
```
./configure --prefix=/usr    \
            --enable-cxx     \
            --disable-static \
            --docdir=/usr/share/doc/gmp-6.1.2
make
make html
make check 2>&1 | tee gmp-check-log
awk '/# PASS:/{total+=$3} ; END{print total}' gmp-check-log
make install
make install-html
```
### MPFR
包含多精度数学函数
```
./configure --prefix=/usr        \
            --disable-static     \
            --enable-thread-safe \
            --docdir=/usr/share/doc/mpfr-3.1.5
make
make html
make check
make install
make install-html
```
### mpc
包含一个能以任意高精度进行复数数值计算和对结果正确四舍五入的库
```
./configure --prefix=/usr    \
            --disable-static \
            --docdir=/usr/share/doc/mpc-1.0.3
make
make html
make check
make install
make install-html
```
### 安装GCC
```
case $(uname -m) in
  x86_64)
    sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
  ;;
esac
mkdir -v build
cd build/
SED=sed                               \
../configure --prefix=/usr            \
             --enable-languages=c,c++ \
             --disable-multilib       \
             --disable-bootstrap      \
             --with-system-zlib
make
ulimit -s 32768 #运行测试前增加栈大小
make -k check
../contrib/test_summary | grep -A7 Summ #查看测试结果概要
make install
ln -sv ../usr/bin/cpp /lib
ln -sv gcc /usr/bin/cc
install -v -dm755 /usr/lib/bfd-plugins
ln -sfv ../../libexec/gcc/$(gcc -dumpmachine)/6.3.0/liblto_plugin.so \
        /usr/lib/bfd-plugins/
```
完整性检测
```
echo 'int main(){}' > dummy.c
cc dummy.c -v -Wl,--verbose &> dummy.log
readelf -l a.out | grep ': /lib'
```
输出应为
```
#[Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]
```
确保已经设置好了启动文件
```
grep -o '/usr/lib.*/crt[1in].*succeeded' dummy.log
```
输出应为
```
#/usr/lib/gcc/x86_64-pc-linux-gnu/6.3.0/../../../../lib/crt1.o succeeded
#/usr/lib/gcc/x86_64-pc-linux-gnu/6.3.0/../../../../lib/crti.o succeeded
#/usr/lib/gcc/x86_64-pc-linux-gnu/6.3.0/../../../../lib/crtn.o succeeded
```
确保链接器能找到正确的头文件
```
grep -B4 '^ /usr/include' dummy.log
```
输出
```
#include <...> search starts here:
 /usr/lib/gcc/x86_64-pc-linux-gnu/6.3.0/include
 /usr/local/include
 /usr/lib/gcc/x86_64-pc-linux-gnu/6.3.0/include-fixed
 /usr/include
```
确认新的链接器在使用正确的搜索路径
```
grep 'SEARCH.*/usr/lib' dummy.log |sed 's|; |\n|g'
```
64位机器输出，32位会有所不同
```
SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64")
SEARCH_DIR("/usr/local/lib64")
SEARCH_DIR("/lib64")
SEARCH_DIR("/usr/lib64")
SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib")
SEARCH_DIR("/usr/local/lib")
SEARCH_DIR("/lib")
SEARCH_DIR("/usr/lib");
```
确保使用的是正确的libc
```
grep "/lib.*/libc.so.6 " dummy.log
```
输出
```
attempt to open /lib/libc.so.6 succeeded
```
确保是正确的动态链接器
```
grep found dummy.log
```
输出
```
found ld-linux-x86-64.so.2 at /lib/ld-linux-x86-64.so.2
```
清除测试文件并移动放错的文件
```
rm -v dummy.c a.out dummy.log
mkdir -pv /usr/share/gdb/auto-load/usr/lib
mv -v /usr/lib/*gdb.py /usr/share/gdb/auto-load/usr/lib
```
### bzip2
```
patch -Np1 -i ../bzip2-1.0.6-install_docs-1.patch
sed -i 's@\(ln -s -f \)$(PREFIX)/bin/@\1@' Makefile
sed -i "s@(PREFIX)/man@(PREFIX)/share/man@g" Makefile
make -f Makefile-libbz2_so
make clean
make
make PREFIX=/usr install
cp -v bzip2-shared /bin/bzip2
cp -av libbz2.so* /lib
ln -sv ../../lib/libbz2.so.1.0 /usr/lib/libbz2.so
rm -v /usr/bin/{bunzip2,bzcat,bzip2}
ln -sv bzip2 /bin/bunzip2
ln -sv bzip2 /bin/bzcat
```
### Pkg-config
包含在配置和make文件运行时把include路径和库路径传递给编译工具的工具
```
./configure --prefix=/usr              \
            --with-internal-glib       \
            --disable-compile-warnings \
            --disable-host-tool        \
            --docdir=/usr/share/doc/pkg-config-0.29.1
make
make check
make install
```
### Ncurses-6.0
包含用于不依赖于特定终端的字符屏幕处理的库
```
sed -i '/LIBTOOL_INSTALL/d' c++/Makefile.in
./configure --prefix=/usr           \
            --mandir=/usr/share/man \
            --with-shared           \
            --without-debug         \
            --without-normal        \
            --enable-pc-files       \
            --enable-widec
make
make install
mv -v /usr/lib/libncursesw.so.6* /lib
ln -sfv ../../lib/$(readlink /usr/lib/libncursesw.so) /usr/lib/libncursesw.so
for lib in ncurses form panel menu ; do
    rm -vf                    /usr/lib/lib${lib}.so
    echo "INPUT(-l${lib}w)" > /usr/lib/lib${lib}.so
    ln -sfv ${lib}w.pc        /usr/lib/pkgconfig/${lib}.pc
done
rm -vf                     /usr/lib/libcursesw.so
echo "INPUT(-lncursesw)" > /usr/lib/libcursesw.so
ln -sfv libncurses.so      /usr/lib/libcurses.so
mkdir -v       /usr/share/doc/ncurses-6.0
cp -v -R doc/* /usr/share/doc/ncurses-6.0
```
### attr
包含管理文件系统对象的扩展属性的工具
```
sed -i -e 's|/@pkg_name@|&-@pkg_version@|' include/builddefs.in
sed -i -e "/SUBDIRS/s|man[25]||g" man/Makefile
./configure --prefix=/usr \
            --bindir=/bin \
            --disable-static
make
make -j1 tests root-tests
make install install-dev install-lib
chmod -v 755 /usr/lib/libattr.so
mv -v /usr/lib/libattr.so.* /lib
ln -sfv ../../lib/$(readlink /usr/lib/libattr.so) /usr/lib/libattr.so
```
### acl
包含管理访问控制列表的工具，用于定义文件和目录更细粒度的自定义访问权限
```
sed -i -e 's|/@pkg_name@|&-@pkg_version@|' include/builddefs.in
sed -i "s:| sed.*::g" test/{sbits-restore,cp,misc}.test
sed -i -e "/TABS-1;/a if (x > (TABS-1)) x = (TABS-1);" \
    libacl/__acl_to_any_text.c
./configure --prefix=/usr    \
            --bindir=/bin    \
            --disable-static \
            --libexecdir=/usr/lib
make
make install install-dev install-lib
chmod -v 755 /usr/lib/libacl.so
mv -v /usr/lib/libacl.so.* /lib
ln -sfv ../../lib/$(readlink /usr/lib/libacl.so) /usr/lib/libacl.so
```
### libcap
实现了可用在Linux内核上对POSIX 1003.1e功能的用户接口。将所有强大的root权限划分为不同的权限组合。
```
sed -i '/install.*STALIBNAME/d' libcap/Makefile
make
make RAISE_SETFCAP=no lib=lib prefix=/usr install
chmod -v 755 /usr/lib/libcap.so
mv -v /usr/lib/libcap.so.* /lib
ln -sfv ../../lib/$(readlink /usr/lib/libcap.so) /usr/lib/libcap.so
```
### sed
包含一个流编辑器
```
sed -i 's/usr/tools/'       build-aux/help2man
sed -i 's/panic-tests.sh//' Makefile.in
./configure --prefix=/usr --bindir=/bin
make
make html
make check
make install
install -d -m755           /usr/share/doc/sed-4.4
install -m644 doc/sed.html /usr/share/doc/sed-4.4
```
### shadow
包含以安全方式处理密码的程序
```
sed -i 's/groups$(EXEEXT) //' src/Makefile.in
find man -name Makefile.in -exec sed -i 's/groups\.1 / /'   {} \;
find man -name Makefile.in -exec sed -i 's/getspnam\.3 / /' {} \;
find man -name Makefile.in -exec sed -i 's/passwd\.5 / /'   {} \;
sed -i -e 's@#ENCRYPT_METHOD DES@ENCRYPT_METHOD SHA512@' \
       -e 's@/var/spool/mail@/var/mail@' etc/login.defs
sed -i 's/1000/999/' etc/useradd
sed -i -e '47 d' -e '60,65 d' libmisc/myname.c
./configure --sysconfdir=/etc --with-group-name-max-length=32
make
make install
mv -v /usr/bin/passwd /bin
```
配置shadow
```
pwconv
grpconv
```
设置root密码
```
passwd root
```
### pamisc
包含用于显示运行中进程信息的程序
```
./configure --prefix=/usr
make
make install
mv -v /usr/bin/fuser   /bin
mv -v /usr/bin/killall /bin
```
### iana-etc
为网络服务和协议提供数据
```
make
make install
```
### m4
包含一个宏处理器
```
./configure --prefix=/usr
make
make check
make install
```
### Bison
包含一个语法生成器
```
./configure --prefix=/usr --docdir=/usr/share/doc/bison-3.0.4
make
make install
```
### flex
包括一个用于生成识别文本模式的程序的工具
```
HELP2MAN=/tools/bin/true \
./configure --prefix=/usr --docdir=/usr/share/doc/flex-2.6.3
make
make check
make install
ln -sv flex /usr/bin/lex
```
### Grep
```
./configure --prefix=/usr --bindir=/bin
make
make check
make install
```
### readline
提供命令行编辑和历史功能的库的集合
```
sed -i '/MV.*old/d' Makefile.in
sed -i '/{OLDSUFF}/c:' support/shlib-install
./configure --prefix=/usr    \
            --disable-static \
            --docdir=/usr/share/doc/readline-7.0
make SHLIB_LIBS=-lncurses
make SHLIB_LIBS=-lncurses install
mv -v /usr/lib/lib{readline,history}.so.* /lib
ln -sfv ../../lib/$(readlink /usr/lib/libreadline.so) /usr/lib/libreadline.so
ln -sfv ../../lib/$(readlink /usr/lib/libhistory.so ) /usr/lib/libhistory.so
install -v -m644 doc/*.{ps,pdf,html,dvi} /usr/share/doc/readline-7.0
```
### bash
```
patch -Np1 -i ../bash-4.4-upstream_fixes-1.patch
./configure --prefix=/usr                       \
            --docdir=/usr/share/doc/bash-4.4 \
            --without-bash-malloc               \
            --with-installed-readline
make
chown -Rv nobody .
su nobody -s /bin/bash -c "PATH=$PATH make tests"
make install
mv -vf /usr/bin/bash /bin
exec /bin/bash --login +h
```
### bc
包含一个任意精度数值处理的语言
```
patch -Np1 -i ../bc-1.06.95-memory_leak-1.patch
./configure --prefix=/usr           \
            --with-readline         \
            --mandir=/usr/share/man \
            --infodir=/usr/share/info
make
echo "quit" | ./bc/bc -l Test/checklib.b
make install
```
### libtool
包含GNU通用库支持脚本
```
./configure --prefix=/usr
make
make check
make install
```
### GDBM
包含GNU数据库管理器
```
./configure --prefix=/usr \
            --disable-static \
            --enable-libgdbm-compat
make
make check
make install
```
### gperf
为键集合生成完美的哈希函数
```
./configure --prefix=/usr --docdir=/usr/share/doc/gperf-3.0.4
make
make -j1 check
make install
```
### expat
包含一个用于解析XML的面向流的c库
```
./configure --prefix=/usr --disable-static
make
make check
make install
install -v -dm755 /usr/share/doc/expat-2.2.0
install -v -m644 doc/*.{html,png,css} /usr/share/doc/expat-2.2.0
```
### inetutils
包含基本的网络程序
```
./configure --prefix=/usr        \
            --localstatedir=/var \
            --disable-logger     \
            --disable-whois      \
            --disable-rcp        \
            --disable-rexec      \
            --disable-rlogin     \
            --disable-rsh        \
            --disable-servers
make
make check
make install
mv -v /usr/bin/{hostname,ping,ping6,traceroute} /bin
mv -v /usr/bin/ifconfig /sbin
```
### Perl
```
echo "127.0.0.1 localhost $(hostname)" > /etc/hosts
export BUILD_ZLIB=False
export BUILD_BZIP2=0
sh Configure -des -Dprefix=/usr                 \
                  -Dvendorprefix=/usr           \
                  -Dman1dir=/usr/share/man/man1 \
                  -Dman3dir=/usr/share/man/man3 \
                  -Dpager="/usr/bin/less -isR"  \
                  -Duseshrplib
make
make -k test
make install
unset BUILD_ZLIB BUILD_BZIP2
```
### XML::Parser
该模块是到James Clark的XML解析器的Perl Expat接口
```
perl Makefile.PL
make
make test
make install
```
### intltool
是一个用于从源文件中抽取可翻译字符串的国际化工具
```
sed -i 's:\\\${:\\\$\\{:' intltool-update.in
./configure --prefix=/usr
make
make check
make install
install -v -Dm644 doc/I18N-HOWTO /usr/share/doc/intltool-0.51.0/I18N-HOWTO
```
### autoconf
包含用于生成自动配置源代码的shell脚本的程序
```
./configure --prefix=/usr
make
make check
make install
```
### automake
包含了生成可与Autoconf一同使用的Makefile程序
```
sed -i 's:/\\\${:/\\\$\\{:' bin/automake.in
./configure --prefix=/usr --docdir=/usr/share/doc/automake-1.15
make
sed -i "s:./configure:LEXLIB=/usr/lib/libfl.a &:" t/lex-{clean,depend}-cxx.sh
make -j4 check
make install
```
### xz
```
./configure --prefix=/usr    \
            --disable-static \
            --docdir=/usr/share/doc/xz-5.2.3
make
make check
make install
mv -v   /usr/bin/{lzma,unlzma,lzcat,xz,unxz,xzcat} /bin
mv -v /usr/lib/liblzma.so.* /lib
ln -svf ../../lib/$(readlink /usr/lib/liblzma.so) /usr/lib/liblzma.so
```
### kmod
用于加载内核模块的库和工具
```
./configure --prefix=/usr          \
            --bindir=/bin          \
            --sysconfdir=/etc      \
            --with-rootlibdir=/lib \
            --with-xz              \
            --with-zlib
make
make install
for target in depmod insmod lsmod modinfo modprobe rmmod; do
  ln -sfv ../bin/kmod /sbin/$target
done
ln -sfv kmod /bin/lsmod
```
### Gettext
```
./configure --prefix=/usr    \
            --disable-static \
            --docdir=/usr/share/doc/gettext-0.19.8.1
make
make check
make install
chmod -v 0755 /usr/lib/preloadable_libintl.so
```
### procps-ng
包含监视进程的程序
```
./configure --prefix=/usr                            \
            --exec-prefix=                           \
            --libdir=/usr/lib                        \
            --docdir=/usr/share/doc/procps-ng-3.3.12 \
            --disable-static                         \
            --disable-kill
make
sed -i -r 's|(pmap_initname)\\\$|\1|' testsuite/pmap.test/pmap.exp
make check
make install
mv -v /usr/lib/libprocps.so.* /lib
ln -sfv ../../lib/$(readlink /usr/lib/libprocps.so) /usr/lib/libprocps.so
```
### E2fsprogs
包含用于处理ext2文件系统的工具，也支持ext3和ext4
```
mkdir -v build
cd build
LIBS=-L/tools/lib                    \
CFLAGS=-I/tools/include              \
PKG_CONFIG_PATH=/tools/lib/pkgconfig \
../configure --prefix=/usr           \
             --bindir=/bin           \
             --with-root-prefix=""   \
             --enable-elf-shlibs     \
             --disable-libblkid      \
             --disable-libuuid       \
             --disable-uuidd         \
             --disable-fsck
make
ln -sfv /tools/lib/lib{blk,uu}id.so.1 lib
make LD_LIBRARY_PATH=/tools/lib check
make install
make install-libs
chmod -v u+w /usr/lib/{libcom_err,libe2p,libext2fs,libss}.a
gunzip -v /usr/share/info/libext2fs.info.gz
install-info --dir-file=/usr/share/info/dir /usr/share/info/libext2fs.info
makeinfo -o      doc/com_err.info ../lib/et/com_err.texinfo
install -v -m644 doc/com_err.info /usr/share/info
install-info --dir-file=/usr/share/info/dir /usr/share/info/com_err.info
```
### coreutils
包含用于显示和设置基本系统特性的工具
```
patch -Np1 -i ../coreutils-8.26-i18n-1.patch
FORCE_UNSAFE_CONFIGURE=1 ./configure \
            --prefix=/usr            \
            --enable-no-install-program=kill,uptime
FORCE_UNSAFE_CONFIGURE=1 make
make NON_ROOT_USERNAME=nobody check-root
echo "dummy:x:1000:nobody" >> /etc/group
chown -Rv nobody .
su nobody -s /bin/bash \
          -c "PATH=$PATH make RUN_EXPENSIVE_TESTS=yes check"
sed -i '/dummy/d' /etc/group
make install
mv -v /usr/bin/{cat,chgrp,chmod,chown,cp,date,dd,df,echo} /bin
mv -v /usr/bin/{false,ln,ls,mkdir,mknod,mv,pwd,rm} /bin
mv -v /usr/bin/{rmdir,stty,sync,true,uname} /bin
mv -v /usr/bin/chroot /usr/sbin
mv -v /usr/share/man/man1/chroot.1 /usr/share/man/man8/chroot.8
sed -i s/\"1\"/\"8\"/1 /usr/share/man/man8/chroot.8
mv -v /usr/bin/{head,sleep,nice,test,[} /bin
```
### diffutils
包含显示文件和目录差异的程序
```
sed -i 's:= @mkdir_p@:= /bin/mkdir -p:' po/Makefile.in.in
./configure --prefix=/usr
make
make check
make install
```
### Gawk
包含用于操作文本文件的程序
```
./configure --prefix=/usr
make
make check
make install
mkdir -v /usr/share/doc/gawk-4.1.4
cp    -v doc/{awkforai.txt,*.{eps,pdf,jpg}} /usr/share/doc/gawk-4.1.4
```
### Findutils
```
./configure --prefix=/usr --localstatedir=/var/lib/locate
make
make check
make install
mv -v /usr/bin/find /bin
sed -i 's|find:=${BINDIR}|find:=/bin|' /usr/bin/updatedb
```
### groff
包含用于处理和格式化文本的程序
```
PAGE=A4 ./configure --prefix=/usr
make
make install
```
### grub
包含多重启动管理器
```
./configure --prefix=/usr          \
            --sbindir=/sbin        \
            --sysconfdir=/etc      \
            --disable-efiemu       \
            --disable-werror
make
make install
```
### less
包含一个文本文件查看器
```
./configure --prefix=/usr --sysconfdir=/etc
make
make install
```
### Gzip
```
./configure --prefix=/usr
make
make check
make install
mv -v /usr/bin/gzip /bin
```
### IPRoute2
包含基于IPV4网络的基本和高级程序
```
sed -i /ARPD/d Makefile
sed -i 's/arpd.8//' man/man8/Makefile
rm -v doc/arpd.sgml
sed -i 's/m_ipt.o//' tc/Makefile
make
make DOCDIR=/usr/share/doc/iproute2-4.9.0 install
```
### kbd
包含键表文件、控制台字体和键盘工具
```
patch -Np1 -i ../kbd-2.0.4-backspace-1.patch
sed -i 's/\(RESIZECONS_PROGS=\)yes/\1no/g' configure
sed -i 's/resizecons.8 //' docs/man/man8/Makefile.in
PKG_CONFIG_PATH=/tools/lib/pkgconfig ./configure --prefix=/usr --disable-vlock
make
make check
make install
mkdir -v       /usr/share/doc/kbd-2.0.4
cp -R -v docs/doc/* /usr/share/doc/kbd-2.0.4
```
### libpipeline
包含以灵活方便方式管理管道和子进程的库
```
PKG_CONFIG_PATH=/tools/lib/pkgconfig ./configure --prefix=/usr
make
make check
make install
```
### make-4.2.1
```
./configure --prefix=/usr
make
make check
make install
```
### Patch
```
./configure --prefix=/usr
make
make check
make install
```
### sysklogd
包含用于记录系统消息的程序
```
sed -i '/Error loading kernel symbols/{n;n;d}' ksym_mod.c
sed -i 's/union wait/int/' syslogd.c
make
make BINDIR=/sbin install
```
配置sysklogd
```
cat > /etc/syslog.conf << "EOF"
# Begin /etc/syslog.conf
auth,authpriv.* -/var/log/auth.log
*.*;auth,authpriv.none -/var/log/sys.log
daemon.* -/var/log/daemon.log
kern.* -/var/log/kern.log
mail.* -/var/log/mail.log
user.* -/var/log/user.log
*.emerg *
# End /etc/syslog.conf
EOF
```
### sysvinit
包含控制系统启动，运行，以及关闭的程序
```
patch -Np1 -i ../sysvinit-2.88dsf-consolidated-1.patch
make -C src
make -C src install
```
### eudev
包含动态创建设备节点的程序
```
sed -r -i 's|/usr(/bin/test)|\1|' test/udev-test.pl
sed -i '/keyboard_lookup_key/d' src/udev/udev-builtin-keyboard.c
cat > config.cache << "EOF"
HAVE_BLKID=1
BLKID_LIBS="-lblkid"
BLKID_CFLAGS="-I/tools/include"
EOF
./configure --prefix=/usr           \
            --bindir=/sbin          \
            --sbindir=/sbin         \
            --libdir=/usr/lib       \
            --sysconfdir=/etc       \
            --libexecdir=/lib       \
            --with-rootprefix=      \
            --with-rootlibdir=/lib  \
            --enable-manpages       \
            --disable-static        \
            --config-cache
LIBRARY_PATH=/tools/lib make
mkdir -pv /lib/udev/rules.d
mkdir -pv /etc/udev/rules.d
make LD_LIBRARY_PATH=/tools/lib check
make LD_LIBRARY_PATH=/tools/lib install
tar -xvf ../udev-lfs-20140408.tar.bz2
make -f udev-lfs-20140408/Makefile.lfs install
```
配置
```
LD_LIBRARY_PATH=/tools/lib udevadm hwdb --update
```
### Util-linux
```
mkdir -pv /var/lib/hwclock
./configure ADJTIME_PATH=/var/lib/hwclock/adjtime   \
            --docdir=/usr/share/doc/util-linux-2.29.1 \
            --disable-chfn-chsh  \
            --disable-login      \
            --disable-nologin    \
            --disable-su         \
            --disable-setpriv    \
            --disable-runuser    \
            --disable-pylibmount \
            --disable-static     \
            --without-python     \
            --without-systemd    \
            --without-systemdsystemunitdir
make
make install
```
### man-db
包含用于查找和查看man页面的程序
```
./configure --prefix=/usr                        \
            --docdir=/usr/share/doc/man-db-2.7.6.1 \
            --sysconfdir=/etc                    \
            --disable-setuid                     \
            --enable-cache-owner=bin             \
            --with-browser=/usr/bin/lynx         \
            --with-vgrind=/usr/bin/vgrind        \
            --with-grap=/usr/bin/grap
make
make check
make install
sed -i "s:man root:root root:g" /usr/lib/tmpfiles.d/man-db.conf
```
### Tar
```
FORCE_UNSAFE_CONFIGURE=1  \
./configure --prefix=/usr \
            --bindir=/bin
make
make check
make install
make -C doc install-html docdir=/usr/share/doc/tar-1.29
```
### Texinfo
```
./configure --prefix=/usr --disable-static
make
make check
make install
make TEXMF=/usr/share/texmf install-tex
pushd /usr/share/info
rm -v dir
for f in *
  do install-info $f dir 2>/dev/null
done
popd
```
### vim
包含了一个强大的文本编辑器
```
echo '#define SYS_VIMRC_FILE "/etc/vimrc"' >> src/feature.h
./configure --prefix=/usr
make
make -j1 test
make install
ln -sv vim /usr/bin/vi
for L in  /usr/share/man/{,*/}man1/vim.1; do
    ln -sv vim.1 $(dirname $L)/vi.1
done
ln -sv ../vim/vim80/doc /usr/share/doc/vim-8.0.069
```
设置vim
```
cat > /etc/vimrc << "EOF"
" Begin /etc/vimrc
set nocompatible
set backspace=2
set mouse=r
syntax on
if (&term == "xterm") || (&term == "putty")
  set background=dark
endif
" End /etc/vimrc
EOF
```
### 清理无用内容（选做）
```
logout
chroot $LFS /tools/bin/env -i            \
    HOME=/root TERM=$TERM PS1='\u:\w\$ ' \
    PATH=/bin:/usr/bin:/sbin:/usr/sbin   \
    /tools/bin/bash --login
/tools/bin/find /usr/lib -type f -name \*.a \
   -exec /tools/bin/strip --strip-debug {} ';'
/tools/bin/find /lib /usr/lib -type f -name \*.so* \
   -exec /tools/bin/strip --strip-unneeded {} ';'
/tools/bin/find /{bin,sbin} /usr/{bin,sbin,libexec} -type f \
    -exec /tools/bin/strip --strip-all {} ';'
```
### 清理内容
```
rm -rf /tmp/*
logout
chroot "$LFS" /usr/bin/env -i              \
    HOME=/root TERM="$TERM" PS1='\u:\w\$ ' \
    PATH=/bin:/usr/bin:/sbin:/usr/sbin     \
    /bin/bash --login          #不需要用到/tools中的程序
```
由于不需要可以删除/tools目录，也会删除运行工具链测试的Tcl、Expect、DejaGNU的临时复制，如果还需要的话需要重新编译安装。  
删除之前为了软件包回归测试留下的静态库。这些库来自 binutils，bzip2，e2fsprogs，flex，libtool，和 zlib。执行以上语句删除。
```
rm -f /usr/lib/lib{bfd,opcodes}.a
rm -f /usr/lib/libbz2.a
rm -f /usr/lib/lib{com_err,e2p,ext2fs,ss}.a
rm -f /usr/lib/libltdl.a
rm -f /usr/lib/libfl.a
rm -f /usr/lib/libfl_pic.a
rm -f /usr/lib/libz.a
```
## 基本系统配置
这里很多内容可以不做，等到内核正式编译完成再进入系统完成
### 安装LFS-Bootscripts
LFS-Bootscripts包含一套在启动／关机时开始／停止LFS系统的脚本
```
make install
```
### 网络配置
一些网络的配置可以等到系统运行起来再操作
### 用户名
```
echo "scyhssm" > /etc/hostname
```
### hosts
```
vi /etc/hosts
#修改主机名别名为scyhssm
```
### /etc/inittab
内核初始化第一步调用init，init会看该文件
```
cat > /etc/inittab << "EOF"
# Begin /etc/inittab

id:3:initdefault:

si::sysinit:/etc/rc.d/init.d/rc S

l0:0:wait:/etc/rc.d/init.d/rc 0
l1:S1:wait:/etc/rc.d/init.d/rc 1
l2:2:wait:/etc/rc.d/init.d/rc 2
l3:3:wait:/etc/rc.d/init.d/rc 3
l4:4:wait:/etc/rc.d/init.d/rc 4
l5:5:wait:/etc/rc.d/init.d/rc 5
l6:6:wait:/etc/rc.d/init.d/rc 6

ca:12345:ctrlaltdel:/sbin/shutdown -t1 -a -r now

su:S016:once:/sbin/sulogin

1:2345:respawn:/sbin/agetty --noclear tty1 9600
2:2345:respawn:/sbin/agetty tty2 9600
3:2345:respawn:/sbin/agetty tty3 9600
4:2345:respawn:/sbin/agetty tty4 9600
5:2345:respawn:/sbin/agetty tty5 9600
6:2345:respawn:/sbin/agetty tty6 9600

# End /etc/inittab
EOF
```
### /etc/sysconfig/clock
```
cat > /etc/sysconfig/clock << "EOF"
# Begin /etc/sysconfig/clock

UTC=1

# Set this to any options you might need to give to hwclock,
# such as machine hardware clock type for Alphas.
CLOCKPARAMS=

# End /etc/sysconfig/clock
EOF
```
### /etc/shells
```
cat > /etc/shells << "EOF"
# Begin /etc/shells
/bin/sh
/bin/bash
# End /etc/shells
EOF
```
## 引导LFS系统
### 创建/etc/fstab
/etc/fstab 文件的作用是让其它程序确定存储设备的默认挂载点、 挂载参数和检查信息(例如完整性检测)。
```
cat > /etc/fstab << "EOF"
/dev/sdb1 / ext4 defaults 0 1
/dev/sdb3 /boot ext4 defaults 0 2
/dev/sdb2 swap swap defaults 0 0
proc /proc proc nosuid,noexec,nodev 0 0
sysfs /sys sysfs nosuid,noexec,nodev 0 0
devpts /dev/pts devpts gid=5,mode=620 0 0
tmpfs /run tmpfs defaults 0 0
devtmpfs /dev devtmpfs mode=0755,nosuid 0 0
EOF
```
### linux-4.9.9
包含linux内核，在这一步，选择安装的模块对最后内核是否能够成功启动起到了非常关键的作用。  
通常虚拟机启动不能使用默认安装的模块，最好每个人能够按照自己硬盘，启动方式等不同的条件安装模块。
```
make mrproper
make defconfig
make menuconfig #图形设置
make
make modules_install
mount --bind /boot /mnt/lfs/boot
cp -v arch/x86/boot/bzImage /boot/vmlinuz-4.9.9-lfs-8.0-rc1
cp -v System.map /boot/System.map-4.9.9
cp -v .config /boot/config-4.9.9
install -d /usr/share/doc/linux-4.9.9
cp -r Documentation/* /usr/share/doc/linux-4.9.9
```
### 使用grub设置启动
grub对硬盘和分区有一套命名规则，会将一些数据写入硬盘的第一个物理扇区这一部分不属于任何一个操作系统，启动时该部分数据激活，然后寻找grub的模块。
```
grub-install /dev/sdb
```
创建/boot/grub/grub.cfg，由于我们的boot是单独分区，因此要加载boot，而vmlinuz-4.9.9-lfs-8.0-rc1文件是在boot下的，所以再稍作修改，去掉/boot。
```
cat > /boot/grub/grub.cfg << "EOF"
# Begin /boot/grub/grub.cfg
set default=0
set timeout=5
insmod ext4
set root=(hd0,3)
menuentry "GNU/Linux, Linux 4.9.9-lfs-8.0-rc1" {
        linux   /vmlinuz-4.9.9-lfs-8.0-rc1 root=/dev/sdb3 ro
}
EOF
```
## 最后的阶段
确定当前使用的LFS版本
```
echo 8.0-rc1 > /etc/lfs-release
```
向LSB致敬
```
cat > /etc/lsb-release << "EOF"
DISTRIB_ID="Linux From Scratch"
DISTRIB_RELEASE="8.0-rc1"
DISTRIB_CODENAME="scyhssm"
DISTRIB_DESCRIPTION="Linux From Scratch"
EOF
```
重启系统，若出现busy，用fuser –km /dev/sdb 命令去掉使用/dev/sdb的进程
```
logout
umount -v $LFS/dev/pts
umount -v $LFS/dev
umount -v $LFS/run
umount -v $LFS/proc
umount -v $LFS/sys
umount -v $LFS/usr
umount -v $LFS/home
umount -v $LFS/boot
umount -v $LFS
shutdown -r now
```
## 参考
[ 水晶命匣 ](http://ghoulich.xninja.org/)  

---
